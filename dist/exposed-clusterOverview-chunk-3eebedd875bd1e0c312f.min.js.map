{"version":3,"file":"exposed-clusterOverview-chunk-3eebedd875bd1e0c312f.min.js","mappings":"6MAAO,MAAMA,EAAuBC,GAAc,gTASAA,MAAAA,OAA6C,EAASA,EAAUC,QAAUD,EAAUE,KAAK,KAAO,8BAIrIC,EAAyBH,GAAc,CAChD,CACII,MAAO,8MAKmDJ,MAAAA,OAA6C,EAASA,EAAUC,QAAUD,EAAUE,KAAK,KAAO,6EAI1JG,KAAM,SAEV,CACID,MAAO,+MAKmDJ,MAAAA,OAA6C,EAASA,EAAUC,QAAUD,EAAUE,KAAK,KAAO,6EAI1JG,KAAM,UAGDC,EAAYC,IACrB,MAAMC,EAAQC,OAAOC,SAAS,GAAGH,KACjC,MAAO,CACHI,OAAQ,GAAGH,IACXI,KAAM,GACNJ,MAAAA","sources":["webpack://console-demo-plugin/./utils/cluster-overview.ts"],"sourcesContent":["export const getUtilizationQuery = (nodeTypes) => `\n    sum(\n      (\n          1 - rate(node_cpu_seconds_total{mode=\"idle\"}[2m])\n          *\n          on(namespace, pod) group_left(node) node_namespace_pod:kube_pod_info:{pod=~\"node-exporter.+\"}\n      )\n      *\n      on(node) group_left(role) (\n          max by (node) (kube_node_role{role=~\"${(nodeTypes === null || nodeTypes === void 0 ? void 0 : nodeTypes.length) ? nodeTypes.join('|') : '.+'}\"})\n      )\n    )\n  `;\nexport const getUtilizationQueries = (nodeTypes) => [\n    {\n        query: `\n        sum(\n          instance:node_network_receive_bytes_excluding_lo:rate1m\n          *\n          on(instance) group_left(role) (\n            label_replace(max by (node) (kube_node_role{role=~\"${(nodeTypes === null || nodeTypes === void 0 ? void 0 : nodeTypes.length) ? nodeTypes.join('|') : '.+'}\"}), \"instance\", \"$1\", \"node\", \"(.*)\")\n          )\n        )\n      `,\n        desc: 'desc1',\n    },\n    {\n        query: `\n        sum(\n          instance:node_network_transmit_bytes_excluding_lo:rate1m\n          *\n          on(instance) group_left(role) (\n            label_replace(max by (node) (kube_node_role{role=~\"${(nodeTypes === null || nodeTypes === void 0 ? void 0 : nodeTypes.length) ? nodeTypes.join('|') : '.+'}\"}), \"instance\", \"$1\", \"node\", \"(.*)\")\n          )\n        )\n      `,\n        desc: 'desc2',\n    },\n];\nexport const humanize = (val) => {\n    const value = Number.parseInt(`${val}`);\n    return {\n        string: `${value}`,\n        unit: '',\n        value,\n    };\n};\n"],"names":["getUtilizationQuery","nodeTypes","length","join","getUtilizationQueries","query","desc","humanize","val","value","Number","parseInt","string","unit"],"sourceRoot":""}