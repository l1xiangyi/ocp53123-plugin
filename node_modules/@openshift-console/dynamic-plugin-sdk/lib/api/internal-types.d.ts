/// <reference types="node" />
import * as React from 'react';
import { QuickStart } from '@patternfly/quickstarts';
import { Map as ImmutableMap } from 'immutable';
import { FirehoseResult, HealthState, K8sResourceCommon, LIMIT_STATE, PrometheusResponse, QueryParams, StatusGroupMapper, TopConsumerPopoverProps } from '../extensions/console-types';
import { Alert, K8sModel } from './common-types';
declare type WithClassNameProps<R = {}> = R & {
    className?: string;
};
export declare type ActivityItemProps = WithClassNameProps;
export declare type ActivityBodyProps = WithClassNameProps<{
    children: React.ReactNode;
}>;
export declare type AlertsBodyProps = WithClassNameProps<{
    error?: boolean;
}>;
export declare type RecentEventsBodyProps = {
    events: FirehoseResult<EventKind[]>;
    filter?: (arg: EventKind) => boolean;
    moreLink?: string;
};
declare type OngoingActvityProps<T> = {
    resource: T;
};
export declare type OngoingActivityBodyProps = {
    resourceActivities?: (OngoingActvityProps<K8sResourceCommon> & {
        timestamp: Date;
        loader?: () => Promise<React.ComponentType<Partial<OngoingActvityProps<K8sResourceCommon>>>>;
        component?: React.ComponentType<Partial<OngoingActvityProps<K8sResourceCommon>>>;
    })[];
    prometheusActivities?: {
        results: PrometheusResponse[];
        loader?: () => Promise<React.ComponentType<{
            results?: PrometheusResponse[];
        }>>;
        component?: React.ComponentType<{
            results: PrometheusResponse[];
        }>;
    }[];
    loaded: boolean;
};
export declare type AlertItemProps = {
    alert: Alert;
};
export declare type HealthItemProps = WithClassNameProps<{
    title: string;
    details?: string;
    state?: HealthState;
    popupTitle?: string;
    popupClassname?: string;
    popupBodyContent?: React.ReactNode | ((hide: () => void) => React.ReactNode);
    popupKeepOnOutsideClick?: boolean;
    noIcon?: boolean;
    icon?: React.ReactNode;
}>;
export declare type ResourceInventoryItemProps = {
    resources: K8sResourceCommon[];
    additionalResources?: {
        [key: string]: [];
    };
    mapper?: StatusGroupMapper;
    kind: K8sModel;
    isLoading: boolean;
    namespace?: string;
    error: boolean;
    showLink?: boolean;
    TitleComponent?: React.ComponentType<{}>;
    title?: string;
    titlePlural?: string;
    ExpandedComponent?: React.ComponentType<{}>;
    basePath?: string;
    dataTest?: string;
};
export declare type DetailItemProps = {
    title: string;
    children: React.ReactNode;
    isLoading?: boolean;
    error?: boolean;
    valueClassName?: string;
    errorMessage?: string;
};
export declare type DetailsBodyProps = {
    children?: React.ReactNode;
};
export declare type UtilizationBodyProps = {
    children: React.ReactNode;
};
export declare enum ByteDataTypes {
    BinaryBytes = "binaryBytes",
    BinaryBytesWithoutB = "binaryBytesWithoutB",
    DecimalBytes = "decimalBytes",
    DecimalBytesWithoutB = "decimalBytesWithoutB"
}
export declare type UtilizationItemProps = {
    title: string;
    utilization?: PrometheusResponse;
    limit?: PrometheusResponse;
    requested?: PrometheusResponse;
    isLoading: boolean;
    humanizeValue: Function;
    query: string | string[];
    error: boolean;
    max?: number;
    byteDataType?: ByteDataTypes;
    TopConsumerPopover?: React.ComponentType<TopConsumerPopoverProps>;
    setLimitReqState?: (state: {
        limit: LIMIT_STATE;
        requested: LIMIT_STATE;
    }) => void;
};
declare type EventInvolvedObject = {
    apiVersion?: string;
    kind?: string;
    name?: string;
    uid?: string;
    namespace?: string;
};
export declare type EventKind = {
    action?: string;
    count?: number;
    type?: string;
    involvedObject: EventInvolvedObject;
    message?: string;
    eventTime?: string;
    lastTimestamp?: string;
    firstTimestamp?: string;
    reason?: string;
    source: {
        component: string;
        host?: string;
    };
    series?: {
        count?: number;
        lastObservedTime?: string;
        state?: string;
    };
} & K8sResourceCommon;
export declare type UtilizationDurationDropdownProps = {
    adjustDuration?: (duration: number) => number;
};
declare type UtilizationDurationState = {
    duration: number;
    endDate: Date;
    selectedKey: string;
    startDate: Date;
    updateDuration: (duration: number) => void;
    updateEndDate: (endDate: Date) => void;
    updateSelectedKey: (key: string) => void;
};
export declare type UseUtilizationDuration = (adjustDuration?: (duration: number) => number) => UtilizationDurationState;
export declare type Options = {
    ns?: string;
    name?: string;
    path?: string;
    queryParams?: QueryParams;
    cluster?: string;
};
export declare type UseActiveNamespace = () => [string, (ns: string) => void];
export declare type UseLastNamespace = () => [
    string,
    React.Dispatch<React.SetStateAction<string>>,
    boolean
];
export declare type VirtualizedGridProps = {
    items: VirtualizedGridItem[] | VirtualizedGridGroupedItems;
    renderCell: VirtualizedGridRenderCell;
    /**
     * should be set when items are grouped/ `isItemGrouped` is set to true and each group has a heading
     */
    renderHeader?: VirtualizedGridRenderHeader;
    /**
     * Default value: false
     * should be set true when items are grouped
     */
    isItemsGrouped?: boolean;
    /** Grid styles */
    className?: string;
    /** Cell Measurements */
    cellWidth?: number;
    cellMargin?: number;
    celldefaultHeight?: number;
    estimatedCellHeight?: number;
    overscanRowCount?: number;
    headerHeight?: number;
};
export declare type VirtualizedGridItem = {
    [key: string]: any;
};
export declare type VirtualizedGridGroupedItems = {
    [key: string]: VirtualizedGridItem[];
};
export declare type VirtualizedGridRenderHeader = (heading: string) => React.ReactNode;
export declare type VirtualizedGridRenderCell = (item: VirtualizedGridItem) => React.ReactNode;
export declare type LazyActionMenuProps = {
    context: ActionContext;
    variant?: ActionMenuVariant;
    label?: string;
    isDisabled?: boolean;
    extra?: any;
};
export declare type ActionContext = {
    [contextId: string]: any;
};
export declare enum ActionMenuVariant {
    KEBAB = "plain",
    DROPDOWN = "default"
}
declare type Request<R> = {
    active: boolean;
    timeout: NodeJS.Timer;
    inFlight: boolean;
    data: R;
    error: any;
};
export declare type RequestMap<R> = ImmutableMap<string, Request<R>>;
export declare type Fetch = (url: string) => Promise<any>;
export declare type WatchURLProps = {
    url: string;
    fetch?: Fetch;
};
export declare type WatchPrometheusQueryProps = {
    query: string;
    namespace?: string;
    timespan?: number;
};
export declare type UseDashboardResources = ({ prometheusQueries, urls, notificationAlertLabelSelectors, }: {
    prometheusQueries?: WatchPrometheusQueryProps[];
    urls?: WatchURLProps[];
    notificationAlertLabelSelectors?: {
        [k: string]: string;
    };
}) => {
    urlResults: RequestMap<any>;
    prometheusResults: RequestMap<PrometheusResponse>;
    notificationAlerts: {
        alerts: Alert[];
        loaded: boolean;
        loadError: Error;
    };
};
export declare type UseUserSettings = <T>(key: string, defaultValue?: T, sync?: boolean) => [T, React.Dispatch<React.SetStateAction<T>>, boolean];
export declare type QuickStartsLoaderProps = {
    children: (quickStarts: QuickStart[], loaded: boolean) => React.ReactNode;
};
export declare type UseURLPoll = <R>(url: string, delay?: number, ...dependencies: any[]) => [R, any, boolean];
export {};
