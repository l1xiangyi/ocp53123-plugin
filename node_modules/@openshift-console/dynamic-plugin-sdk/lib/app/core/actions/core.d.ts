import { ActionType as Action } from 'typesafe-actions';
import { UserKind } from '../../redux-types';
export declare enum ActionType {
    SetUser = "setUser",
    BeginImpersonate = "beginImpersonate",
    EndImpersonate = "endImpersonate",
    SetActiveCluster = "setActiveCluster"
}
export declare const setUser: (user: UserKind) => {
    type: ActionType.SetUser;
    payload: {
        user: UserKind;
    };
};
export declare const beginImpersonate: (kind: string, name: string, subprotocols: string[]) => {
    type: ActionType.BeginImpersonate;
    payload: {
        kind: string;
        name: string;
        subprotocols: string[];
    };
};
export declare const endImpersonate: () => {
    type: ActionType.EndImpersonate;
};
export declare const setActiveCluster: (cluster: any) => {
    type: ActionType.SetActiveCluster;
    payload: {
        cluster: any;
    };
};
declare const coreActions: {
    setUser: (user: UserKind) => {
        type: ActionType.SetUser;
        payload: {
            user: UserKind;
        };
    };
    beginImpersonate: (kind: string, name: string, subprotocols: string[]) => {
        type: ActionType.BeginImpersonate;
        payload: {
            kind: string;
            name: string;
            subprotocols: string[];
        };
    };
    endImpersonate: () => {
        type: ActionType.EndImpersonate;
    };
    setActiveCluster: (cluster: any) => {
        type: ActionType.SetActiveCluster;
        payload: {
            cluster: any;
        };
    };
};
export declare type CoreAction = Action<typeof coreActions>;
export {};
