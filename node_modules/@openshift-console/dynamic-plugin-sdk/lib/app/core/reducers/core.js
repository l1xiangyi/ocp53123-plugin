import { ActionType } from '../actions/core';
/**
 * Reducer function for the core
 * @param state the reducer state
 * @param action provided associated action type alongwith payload
 * @param action.type type of the action
 * @param action.payload associated payload for the action
 * @see CoreAction
 * @returns The the updated state.
 */
export const coreReducer = (state = { user: { identities: [] }, activeCluster: '' }, action) => {
    switch (action.type) {
        case ActionType.BeginImpersonate:
            return Object.assign(Object.assign({}, state), { impersonate: {
                    kind: action.payload.kind,
                    name: action.payload.name,
                    subprotocols: action.payload.subprotocols,
                } });
        case ActionType.EndImpersonate: {
            const stateKeys = Object.keys(state);
            return stateKeys.reduce((acc, key) => {
                if (key !== 'impersonate') {
                    return Object.assign(Object.assign({}, acc), { [key]: state[key] });
                }
                return acc;
            }, {});
        }
        case ActionType.SetUser:
            return Object.assign(Object.assign({}, state), { user: action.payload.user });
        case ActionType.SetActiveCluster:
            return Object.assign(Object.assign({}, state), { activeCluster: action.payload.cluster });
        default:
            return state;
    }
};
//# sourceMappingURL=core.js.map