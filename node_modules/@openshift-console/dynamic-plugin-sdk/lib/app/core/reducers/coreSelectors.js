/**
 * It provides impersonation details from the redux store.
 * @param state the root state
 * @returns The the impersonate state.
 */
export const getImpersonate = (state) => state.sdkCore.impersonate;
/**
 * It provides impersonation details from the redux store as a props object.
 * @param state the root state
 * @returns The the impersonation details props object.
 */
export const impersonateStateToProps = (state) => {
    return { impersonate: getImpersonate(state) };
};
/**
 * It provides user details from the redux store.
 * @param state the root state
 * @returns The the user state.
 */
export const getUser = (state) => state.sdkCore.user;
/**
 * It provides current active cluster.
 * @param state the root state
 * @returns The the current active cluster.
 */
export const getActiveCluster = (state) => { var _a; return ((_a = state === null || state === void 0 ? void 0 : state.sdkCore) === null || _a === void 0 ? void 0 : _a.activeCluster) || 'local-cluster'; };
//# sourceMappingURL=coreSelectors.js.map