import { ActionType as Action } from 'typesafe-actions';
import { DiscoveryResources, K8sModel, MatchLabels, Selector } from '../../../api/common-types';
import { K8sResourceCommon, FilterValue } from '../../../extensions/console-types';
declare type K8sResourceKind = K8sResourceCommon & {
    spec?: {
        selector?: Selector | MatchLabels;
        [key: string]: any;
    };
    status?: {
        [key: string]: any;
    };
    data?: {
        [key: string]: any;
    };
};
export declare enum ActionType {
    ReceivedResources = "resources",
    GetResourcesInFlight = "getResourcesInFlight",
    StartWatchK8sObject = "startWatchK8sObject",
    StartWatchK8sList = "startWatchK8sList",
    ModifyObject = "modifyObject",
    StopWatchK8s = "stopWatchK8s",
    Errored = "errored",
    Loaded = "loaded",
    BulkAddToList = "bulkAddToList",
    UpdateListFromWS = "updateListFromWS",
    FilterList = "filterList"
}
declare type K8sEvent = {
    type: 'ADDED' | 'DELETED' | 'MODIFIED';
    object: K8sResourceKind;
};
export declare const updateListFromWS: (id: string, k8sObjects: K8sEvent[]) => {
    type: ActionType.UpdateListFromWS;
    payload: {
        id: string;
        k8sObjects: K8sEvent[];
    };
};
export declare const loaded: (id: string, k8sObjects: K8sResourceKind | K8sResourceKind[]) => {
    type: ActionType.Loaded;
    payload: {
        id: string;
        k8sObjects: K8sResourceKind | K8sResourceKind[];
    };
};
export declare const bulkAddToList: (id: string, k8sObjects: K8sResourceKind[]) => {
    type: ActionType.BulkAddToList;
    payload: {
        id: string;
        k8sObjects: K8sResourceKind[];
    };
};
export declare const startWatchK8sObject: (id: string) => {
    type: ActionType.StartWatchK8sObject;
    payload: {
        id: string;
    };
};
export declare const startWatchK8sList: (id: string, query: {
    [key: string]: string;
}) => {
    type: ActionType.StartWatchK8sList;
    payload: {
        id: string;
        query: {
            [key: string]: string;
        };
    };
};
export declare const modifyObject: (id: string, k8sObjects: K8sResourceKind) => {
    type: ActionType.ModifyObject;
    payload: {
        id: string;
        k8sObjects: K8sResourceKind;
    };
};
export declare const stopWatchK8s: (id: string) => {
    type: ActionType.StopWatchK8s;
    payload: {
        id: string;
    };
};
export declare const errored: (id: string, k8sObjects: any) => {
    type: ActionType.Errored;
    payload: {
        id: string;
        k8sObjects: any;
    };
};
export declare const filterList: (id: string, name: string, value: FilterValue) => {
    type: ActionType.FilterList;
    payload: {
        id: string;
        name: string;
        value: FilterValue;
    };
};
export declare const partialObjectMetadataListHeader: {
    Accept: string;
};
export declare const partialObjectMetadataHeader: {
    Accept: string;
};
export declare const stopK8sWatch: (id: string) => (dispatch: any) => any;
export declare const watchK8sList: (id: string, query: {
    [key: string]: string;
}, k8skind: K8sModel, extraAction?: any, partialMetadata?: boolean) => (dispatch: any, getState: any) => Promise<void> | ((...args: any[]) => void);
export declare const watchK8sObject: (id: string, name: string, namespace: string, query: {
    [key: string]: string;
}, k8sType: K8sModel, partialMetadata?: boolean) => (dispatch: any, getState: any) => any;
export declare const receivedResources: (resources: DiscoveryResources) => {
    type: ActionType.ReceivedResources;
    payload: {
        resources: DiscoveryResources;
    };
};
export declare const getResourcesInFlight: () => {
    type: ActionType.GetResourcesInFlight;
};
declare const k8sActions: {
    startWatchK8sObject: (id: string) => {
        type: ActionType.StartWatchK8sObject;
        payload: {
            id: string;
        };
    };
    startWatchK8sList: (id: string, query: {
        [key: string]: string;
    }) => {
        type: ActionType.StartWatchK8sList;
        payload: {
            id: string;
            query: {
                [key: string]: string;
            };
        };
    };
    modifyObject: (id: string, k8sObjects: K8sResourceKind) => {
        type: ActionType.ModifyObject;
        payload: {
            id: string;
            k8sObjects: K8sResourceKind;
        };
    };
    stopWatchK8s: (id: string) => {
        type: ActionType.StopWatchK8s;
        payload: {
            id: string;
        };
    };
    errored: (id: string, k8sObjects: any) => {
        type: ActionType.Errored;
        payload: {
            id: string;
            k8sObjects: any;
        };
    };
    loaded: (id: string, k8sObjects: K8sResourceKind | K8sResourceKind[]) => {
        type: ActionType.Loaded;
        payload: {
            id: string;
            k8sObjects: K8sResourceKind | K8sResourceKind[];
        };
    };
    bulkAddToList: (id: string, k8sObjects: K8sResourceKind[]) => {
        type: ActionType.BulkAddToList;
        payload: {
            id: string;
            k8sObjects: K8sResourceKind[];
        };
    };
    updateListFromWS: (id: string, k8sObjects: K8sEvent[]) => {
        type: ActionType.UpdateListFromWS;
        payload: {
            id: string;
            k8sObjects: K8sEvent[];
        };
    };
    filterList: (id: string, name: string, value: FilterValue) => {
        type: ActionType.FilterList;
        payload: {
            id: string;
            name: string;
            value: FilterValue;
        };
    };
    receivedResources: (resources: DiscoveryResources) => {
        type: ActionType.ReceivedResources;
        payload: {
            resources: DiscoveryResources;
        };
    };
    getResourcesInFlight: () => {
        type: ActionType.GetResourcesInFlight;
    };
};
export declare type K8sAction = Action<typeof k8sActions>;
export {};
