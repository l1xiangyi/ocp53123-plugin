import { getImpersonate, getActiveCluster } from '../../app/core/reducers';
import storeHandler from '../../app/storeHandler';
/**
 * A function that creates impersonation and multicluster related headers for API requests using current redux state.
 * @param targetCluster override the current active cluster with the provided targetCluster
 * @returns an object containing the appropriate impersonation and clustr requst headers, based on redux state
 */
export const getConsoleRequestHeaders = (targetCluster) => {
    const store = storeHandler.getStore();
    if (!store)
        return undefined;
    const state = store.getState();
    // Set X-Cluster header
    const cluster = getActiveCluster(state);
    const headers = {
        'X-Cluster': targetCluster !== null && targetCluster !== void 0 ? targetCluster : cluster,
    };
    // Set impersonation headers
    const { kind, name } = getImpersonate(state) || {};
    if ((kind === 'User' || kind === 'Group') && name) {
        // Even if we are impersonating a group, we still need to set Impersonate-User to something or k8s will complain
        headers['Impersonate-User'] = name;
        if (kind === 'Group') {
            headers['Impersonate-Group'] = name;
        }
    }
    return headers;
};
//# sourceMappingURL=console-fetch-utils.js.map