/**
 * @deprecated - This will become obsolete when we move away from K8sResourceKindReference to K8sGroupVersionKind
 * Provides a reference string that uniquely identifies the group, version, and kind of a k8s resource.
 * @param K8sGroupVersionKind Pass K8sGroupVersionKind which will have group, version, and kind of a k8s resource.
 * @param K8sGroupVersionKind.group Pass group of k8s resource or model.
 * @param K8sGroupVersionKind.version Pass version of k8s resource or model.
 * @param K8sGroupVersionKind.kind Pass kind of k8s resource or model.
 * @returns The reference for any k8s resource i.e `group~version~kind`.
 * If the group will not be present then "core" will be returned as part of the group in reference.
 */
export const getReference = ({ group, version, kind, }) => [group || 'core', version, kind].join('~');
/**
 * @deprecated - This will become obsolete when we move away from K8sResourceKindReference to K8sGroupVersionKind
 * @see getGroupVersionKindForModel
 * Provides a reference string that uniquely identifies the group, version, and kind of a k8s model.
 * @param model k8s model
 * @returns The reference for model i.e `group~version~kind`.
 */
export const getReferenceForModel = (model) => getReference({ group: model.apiGroup, version: model.apiVersion, kind: model.kind });
/**
 * Provides apiVersion for a k8s model.
 * @param model k8s model
 * @returns The apiVersion for the model i.e `group/version`.
 * */
export const getAPIVersionForModel = (model) => !(model === null || model === void 0 ? void 0 : model.apiGroup) ? model.apiVersion : `${model.apiGroup}/${model.apiVersion}`;
/**
 * Provides a group, version, and kind for a resource.
 * @param resource k8s resource
 * @returns The group, version, kind for the provided resource.
 * If the resource does not have an API group, group "core" will be returned.
 * If the resource has an invalid apiVersion then it'll throw Error.
 * */
export const getGroupVersionKindForResource = (resource) => {
    const { apiVersion, kind } = resource;
    const apiVersionSplit = apiVersion.split('/');
    const apiVersionSplitLen = apiVersionSplit.length;
    if (apiVersionSplitLen > 2)
        throw new Error('Provided resource has invalid apiVersion.');
    return Object.assign(Object.assign({}, (apiVersionSplitLen === 2 && {
        group: apiVersionSplit[0],
    })), { version: apiVersionSplitLen === 2 ? apiVersionSplit[1] : apiVersion, kind });
};
/**
 * Provides a group, version, and kind for a k8s model.
 * @param model k8s model
 * @returns The group, version, kind for the provided model.
 * If the model does not have an apiGroup, group "core" will be returned.
 * */
export const getGroupVersionKindForModel = ({ apiGroup, apiVersion: version, kind, }) => (Object.assign(Object.assign({}, (apiGroup && { group: apiGroup })), { version,
    kind }));
/**
 * @deprecated - This will become obsolete when we move away from K8sResourceKindReference to K8sGroupVersionKind
 * Provides a group, version, and kind for a reference.
 * @param reference reference for group, version, kind i.e `group~version~kind`.
 * @returns The group, version, kind for the provided reference.
 * If the group's value is "core" it denotes resource does not have an API group.
 * */
export const getGroupVersionKindForReference = (reference) => {
    const referenceSplit = reference.split('~');
    if (referenceSplit.length > 3)
        throw new Error('Provided reference is invalid.');
    const [group, version, kind] = referenceSplit;
    return {
        group,
        version,
        kind,
    };
};
/**
 * @deprecated - This will become obsolete when we move away from K8sResourceKindReference to K8sGroupVersionKind
 * Provides a reference string that uniquely identifies the group, version, and kind of K8sGroupVersionKind.
 * @param kind kind can be of type K8sResourceKindReference or K8sGroupVersionKind
 * @returns The reference i.e `group~version~kind`.
 */
export const transformGroupVersionKindToReference = (kind) => kind && typeof kind !== 'string' ? getReference(kind) : kind;
//# sourceMappingURL=k8s-ref.js.map