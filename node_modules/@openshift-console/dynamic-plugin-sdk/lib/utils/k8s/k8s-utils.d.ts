import { Map as ImmutableMap } from 'immutable';
import { K8sModel, MatchExpression, ModelDefinition, Selector } from '../../api/common-types';
import { Options } from '../../api/internal-types';
import { K8sResourceKindReference } from '../../extensions/console-types';
import { Extension } from '../../types';
import { WSFactory } from './ws-factory';
export declare const getK8sResourcePath: (model: K8sModel, options: Options) => string;
export declare const resourceURL: (model: K8sModel, options: Options) => string;
export declare const requirementToString: (requirement: MatchExpression) => string;
export declare const createEquals: (key: string, value: string) => MatchExpression;
export declare const toRequirements: (selector?: Selector) => MatchExpression[];
export declare const selectorToString: (selector: Selector) => string;
export declare const k8sWatch: (kind: K8sModel, query?: {
    labelSelector?: Selector;
    resourceVersion?: string;
    ns?: string;
    fieldSelector?: string;
}, wsOptions?: {
    [key: string]: any;
}) => WSFactory;
interface PluginStore {
    getExtensionsInUse: () => Extension[];
}
export declare const setPluginStore: (store: PluginStore) => void;
export declare const modelsToMap: (models: K8sModel[]) => ImmutableMap<K8sResourceKindReference, K8sModel>;
export declare const isModelDefinition: (e: Extension) => e is ModelDefinition;
/**
 * Provides a synchronous way to acquire all statically-defined Kubernetes models.
 * NOTE: This will not work for CRDs defined at runtime, use `connectToModels` instead.
 */
export declare const allModels: () => any;
export declare const getNamespacedResources: () => any;
export {};
