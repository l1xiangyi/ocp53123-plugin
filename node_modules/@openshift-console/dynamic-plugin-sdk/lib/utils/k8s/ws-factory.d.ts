export declare type WSOptions = {
    host: string;
    path: string;
    subprotocols: string[];
    reconnect?: boolean;
    jsonParse?: boolean;
    bufferMax?: number;
    bufferFlushInterval?: number;
    timeout?: number;
};
declare type GenericHandler<T = any> = (data: T) => void;
export declare type OpenHandler = GenericHandler<undefined>;
export declare type CloseHandler = GenericHandler<CloseEvent>;
export declare type ErrorHandler = GenericHandler<Event>;
/**
 * The WebSocket can send JSON that is parsed, or we just send it through as-is
 */
export declare type MessageDataType = object | any;
export declare type MessageHandler = GenericHandler<MessageDataType>;
/**
 * Data is provided potentially by .destroy() caller.
 */
export declare type DestroyHandler = GenericHandler<unknown | undefined>;
export declare type BulkMessageHandler = GenericHandler<MessageDataType>;
/**
 * @class WebSocket factory and utility wrapper.
 */
export declare class WSFactory {
    private readonly id;
    private paused;
    private handlers;
    private state;
    private messageBuffer;
    private connectionAttempt;
    private readonly flushCanceler;
    private options;
    private bufferMax;
    private ws;
    /**
     * @param id - unique id for the WebSocket.
     * @param options - websocket options to initate the WebSocket with.
     */
    constructor(id: string, options: WSOptions);
    private reconnect;
    private connect;
    private registerHandler;
    /**
     * Invoke all registered handler callbacks for a given event type.
     */
    private invokeHandlers;
    /**
     * Triggers event to be buffered or invoked depending on config.
     */
    private triggerEvent;
    onmessage(fn: MessageHandler): this;
    onbulkmessage(fn: BulkMessageHandler): this;
    onerror(fn: ErrorHandler): this;
    onopen(fn: OpenHandler): this;
    onclose(fn: CloseHandler): this;
    ondestroy(fn: DestroyHandler): this;
    flushMessageBuffer(): void;
    /**
     *  Pausing prevents any buffer flushing until unpaused.
     */
    pause(): void;
    unpause(): void;
    isPaused(): boolean;
    getState(): string;
    bufferSize(): number;
    destroy(eventData?: unknown): void;
    send(data: Parameters<typeof WebSocket.prototype.send>[0]): void;
}
export {};
