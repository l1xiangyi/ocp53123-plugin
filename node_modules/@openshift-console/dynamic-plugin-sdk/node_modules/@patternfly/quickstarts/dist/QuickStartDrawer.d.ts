import './QuickStartDrawer.scss';
import * as React from 'react';
import { QuickStartContextValues } from './utils/quick-start-context';
import { QuickStart, AllQuickStartStates } from './utils/quick-start-types';
export interface QuickStartContainerProps extends React.HTMLProps<HTMLDivElement> {
    quickStarts: QuickStart[];
    activeQuickStartID: string;
    setActiveQuickStartID: React.Dispatch<React.SetStateAction<string>>;
    allQuickStartStates: AllQuickStartStates;
    setAllQuickStartStates: React.Dispatch<React.SetStateAction<AllQuickStartStates>>;
    children?: React.ReactNode;
    appendTo?: HTMLElement | (() => HTMLElement);
    fullWidth?: boolean;
    onCloseInProgress?: any;
    onCloseNotInProgress?: any;
    showCardFooters?: boolean;
    useLegacyHeaderColors?: boolean;
    resourceBundle?: any;
    language?: string;
    loading?: boolean;
    useQueryParams?: boolean;
    alwaysShowTaskReview?: boolean;
    /**
     * Additional markdown extensions and renderers to use
     * TODO: example usage - In the meantime you can take a look at:
     * https://github.com/openshift/console/blob/master/frontend/packages/console-app/src/components/quick-starts/utils/quick-start-context.tsx#L235
     */
    markdown?: {
        extensions?: any[];
        renderExtension?: (docContext: HTMLDocument, rootSelector: string) => React.ReactNode;
    };
    contextProps?: QuickStartContextValues;
}
export declare const QuickStartContainer: React.FC<QuickStartContainerProps>;
export interface QuickStartDrawerProps extends React.HTMLProps<HTMLDivElement> {
    quickStarts?: QuickStart[];
    children?: React.ReactNode;
    appendTo?: HTMLElement | (() => HTMLElement);
    fullWidth?: boolean;
    onCloseInProgress?: any;
    onCloseNotInProgress?: any;
}
export declare const QuickStartDrawer: React.FC<QuickStartDrawerProps>;
