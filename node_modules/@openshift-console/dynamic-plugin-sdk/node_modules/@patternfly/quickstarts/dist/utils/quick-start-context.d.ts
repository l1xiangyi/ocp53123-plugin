import React from 'react';
import { AllQuickStartStates, QuickStart, QuickStartState, QuickStartStatus, QuickStartTaskStatus } from './quick-start-types';
export declare type FooterProps = {
    show?: boolean;
};
export declare const getDefaultQuickStartState: (totalTasks?: number, initialStatus?: QuickStartStatus) => {
    status: QuickStartStatus;
    taskNumber: number;
};
export declare type QuickStartContextValues = {
    allQuickStarts?: QuickStart[];
    setAllQuickStarts?: React.Dispatch<React.SetStateAction<QuickStart[]>>;
    activeQuickStartID?: string;
    setActiveQuickStartID?: React.Dispatch<React.SetStateAction<string>>;
    allQuickStartStates?: AllQuickStartStates;
    setAllQuickStartStates?: React.Dispatch<React.SetStateAction<AllQuickStartStates>>;
    activeQuickStartState?: QuickStartState;
    setActiveQuickStart?: (quickStartId: string, totalTasks?: number) => void;
    startQuickStart?: (quickStartId: string, totalTasks?: number) => void;
    restartQuickStart?: (quickStartId: string, totalTasks: number) => void;
    nextStep?: (totalTasks: number) => void;
    previousStep?: () => void;
    setQuickStartTaskNumber?: (quickStartId: string, taskNumber: number) => void;
    setQuickStartTaskStatus?: (taskStatus: QuickStartTaskStatus) => void;
    getQuickStartForId?: (id: string) => QuickStartState;
    footer?: FooterProps;
    useLegacyHeaderColors?: boolean;
    useQueryParams?: boolean;
    markdown?: {
        extensions?: any[];
        renderExtension?: (docContext: HTMLDocument, rootSelector: string) => React.ReactNode;
    };
    resourceBundle?: any;
    getResource?: any;
    setResourceBundle?: any;
    language?: string;
    setLanguage?: any;
    filter?: {
        keyword?: string;
        status?: {
            statusTypes?: any;
            statusFilters?: any;
        };
    };
    setFilter?: any;
    loading?: boolean;
    setLoading?: any;
    alwaysShowTaskReview?: boolean;
    setAlwaysShowTaskReview?: any;
};
export declare const QuickStartContextDefaults: {
    allQuickStarts: any[];
    activeQuickStartID: string;
    allQuickStartStates: {};
    activeQuickStartState: {};
    setAllQuickStarts: () => void;
    resourceBundle: any;
    getResource: () => string;
    language: string;
    useQueryParams: boolean;
    filter: {
        keyword: string;
        status: {
            statusTypes: {};
            statusFilters: any[];
        };
    };
    setFilter: () => void;
    footer: any;
    useLegacyHeaderColors: boolean;
    markdown: any;
    loading: boolean;
    alwaysShowTaskReview: boolean;
};
export declare const QuickStartContext: React.Context<QuickStartContextValues>;
export declare const getResource: (resource: string, options: any, resourceBundle: any, lng: string) => any;
export declare const useValuesForQuickStartContext: (value?: QuickStartContextValues) => QuickStartContextValues;
export declare const QuickStartContextProvider: React.FC<{
    children: React.ReactNode;
    value: QuickStartContextValues;
}>;
