import * as React from 'react';
export interface CatalogTileProps extends Omit<React.HTMLProps<HTMLElement>, 'title'> {
    /** Id */
    id?: any;
    /** Additional css classes */
    className?: string;
    /** Flag if the tile is 'featured' */
    featured: boolean;
    /** Callback for a click on the tile */
    onClick?: (event: React.SyntheticEvent<HTMLElement>) => void;
    /** href for the tile if used as a link */
    href: string;
    /** URL of an image for the item's icon */
    iconImg?: string;
    /** Alternate text for the item's icon */
    iconAlt?: string;
    /** Class for the image when an icon is to be used (exclusive from iconImg) */
    iconClass?: string;
    /** Alternatively provided JSX for the icon */
    icon?: React.ReactNode;
    /** Array of badges */
    badges?: React.ReactNode[];
    /** Tile for the catalog item */
    title: string | React.ReactNode;
    /** Vendor for the catalog item */
    vendor?: string | React.ReactNode;
    /** Description of the catalog item */
    description?: string | React.ReactNode;
    /** Footer for the tile */
    footer?: string | React.ReactNode;
    /** Body content that isn't truncated */
    children?: React.ReactNode;
}
export declare class CatalogTile extends React.Component<CatalogTileProps> {
    static displayName: string;
    static defaultProps: {
        id: any;
        className: string;
        featured: boolean;
        onClick: (event: React.SyntheticEvent<HTMLElement>) => void;
        href: string;
        iconImg: string;
        iconAlt: string;
        iconClass: string;
        icon: React.ReactNode;
        badges: React.ReactNode[];
        vendor: React.ReactNode;
        description: React.ReactNode;
        footer: React.ReactNode;
        children: React.ReactNode;
    };
    private handleClick;
    private renderBadges;
    render(): JSX.Element;
}
//# sourceMappingURL=CatalogTile.d.ts.map