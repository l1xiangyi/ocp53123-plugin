"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CatalogTile = void 0;
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const react_core_1 = require("@patternfly/react-core");
const react_styles_1 = require("@patternfly/react-styles");
class CatalogTile extends React.Component {
    constructor() {
        super(...arguments);
        this.handleClick = (e) => {
            const { onClick, href } = this.props;
            if (!href) {
                e.preventDefault();
            }
            if (onClick) {
                onClick(e);
            }
        };
        this.renderBadges = (badges) => {
            if (!badges || !badges.length) {
                return null;
            }
            return (React.createElement("div", { className: "catalog-tile-pf-badge-container" }, badges.map((badge, index) => (React.createElement("span", { key: `badge-${index}` }, badge)))));
        };
    }
    render() {
        const _a = this.props, { id, className, featured, onClick, href, icon, iconImg, iconAlt, iconClass, badges, title, vendor, description, footer, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        ref, children } = _a, props = tslib_1.__rest(_a, ["id", "className", "featured", "onClick", "href", "icon", "iconImg", "iconAlt", "iconClass", "badges", "title", "vendor", "description", "footer", "ref", "children"]);
        return (React.createElement(react_core_1.Card, Object.assign({ component: href || onClick ? 'a' : 'div', id: id, href: href || '#', className: react_styles_1.css('catalog-tile-pf', { featured }, className), onClick: e => this.handleClick(e), isHoverable: true }, props),
            (badges.length > 0 || iconImg || iconClass || icon) && (React.createElement(react_core_1.CardHeader, null,
                iconImg && React.createElement("img", { className: "catalog-tile-pf-icon", src: iconImg, alt: iconAlt }),
                !iconImg && (iconClass || icon) && React.createElement("span", { className: `catalog-tile-pf-icon ${iconClass}` }, icon),
                badges.length > 0 && React.createElement(react_core_1.CardActions, null, this.renderBadges(badges)))),
            React.createElement(react_core_1.CardTitle, { className: "catalog-tile-pf-header" },
                React.createElement("div", { className: "catalog-tile-pf-title" }, title),
                vendor && React.createElement("div", { className: "catalog-tile-pf-subtitle" }, vendor)),
            (description || children) && (React.createElement(react_core_1.CardBody, { className: "catalog-tile-pf-body" },
                description && (React.createElement("div", { className: "catalog-tile-pf-description" },
                    React.createElement("span", { className: react_styles_1.css({ 'has-footer': footer }) }, description))),
                children)),
            footer && React.createElement(react_core_1.CardFooter, { className: "catalog-tile-pf-footer" }, footer)));
    }
}
exports.CatalogTile = CatalogTile;
CatalogTile.displayName = 'CatalogTile';
CatalogTile.defaultProps = {
    id: null,
    className: '',
    featured: false,
    onClick: null,
    href: null,
    iconImg: null,
    iconAlt: '',
    iconClass: '',
    icon: null,
    badges: [],
    vendor: null,
    description: null,
    footer: null,
    children: null
};
//# sourceMappingURL=CatalogTile.js.map